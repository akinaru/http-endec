apply plugin: 'bintray-release'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

group 'akinaru'
version '1.01'

apply plugin: 'java'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

publish {
    userOrg = 'akinaru'
    groupId = 'akinaru'
    artifactId = 'http-endec'
    publishVersion = '1.01'
    desc = 'Http Java encoder/decoder'
    website = 'https://github.com/akinaru/http-endec-java'
}
task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

subprojects { proj ->
    apply plugin: 'jacoco'

    jacoco {
        version "0.7.1.201405082137"
    }

    task jacocoTestReport(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled = true
            html.enabled = true
        }
        classDirectories = fileTree(
                dir: 'build/intermediates/classes/debug',
                excludes: ['**/R*.class',
                           '**/BuildConfig*'])
        sourceDirectories = files('src/main/java')
        executionData = files('build/jacoco/testDebugUnitTest.exec')
        doFirst {
            files('build/intermediates/classes/debug').getFiles().each { file ->
                if (file.name.contains('$$')) {
                    file.renameTo(file.path.replace('$$', '$'))
                }
            }
        }
    }
}

jacoco {
    toolVersion "0.7.1.201405082137"
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group = "Reporting"
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.jacocoTestReport)

    additionalSourceDirs = files('bboxiot-lib/src/main/java')
    sourceDirectories = files('bboxiot-lib/src/main/java')
    classDirectories = files('bboxiot-lib/build/intermediates/classes/debug')
    executionData = files(subprojects.jacocoTestReport.executionData)
}

task quickTest(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = "fr.bmartel.speedtest.test.SpeedTest"
    args ""
}