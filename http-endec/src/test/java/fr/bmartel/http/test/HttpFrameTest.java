/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Bertrand Martel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package fr.bmartel.http.test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

import org.junit.Test;

import fr.bmartel.protocol.http.HttpFrame;
import fr.bmartel.protocol.http.HttpVersion;
import fr.bmartel.protocol.http.states.HttpStates;
import fr.bmartel.http.mock.ListOfBytesMock;

/**
 * Http request frame test class
 * 
 * @author Bertrand Martel
 * 
 */
public class HttpFrameTest {

	@Test
	public void getContentLengthTest() {
		/* test with no headers */
		HashMap<String, String> headers = new HashMap<String, String>();
		HttpFrame frame = new HttpFrame();
		frame.setHeaders(headers);
		assertTrue("test content-length : 0", frame.getContentLength() == 0);
		headers = new HashMap<String, String>();
		headers.put("content-length", "125");
		frame.setHeaders(headers);
		assertTrue("test content-length : 125", frame.getContentLength() == 125);
		headers = new HashMap<String, String>();
		headers.put("CONTENT-LENGTH", "125");
		frame.setHeaders(headers);
		assertTrue("test CONTENT-LENGTH : 125", frame.getContentLength() == 0);
		headers = new HashMap<String, String>();
		headers.put("content-length", "abcd");
		frame.setHeaders(headers);
		assertTrue("test content-length with invalid format",
				frame.getContentLength() == 0);
	}

	@Test
	public void parseBodyTest() {
		/* test body */
		String basicBody = "body ............................\r\n";
		InputStream inputstream = new ByteArrayInputStream(basicBody.getBytes());

		try {
			HttpFrame frame = new HttpFrame();
			frame.parseBody(inputstream);
			assertTrue("test basic body with no content-length", frame
					.getBody().getBytes().length == 0);
		} catch (IOException e) {
			fail("IOException");
		}
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("content-length", String.valueOf(basicBody.length() - 2));
		HttpFrame frame = new HttpFrame();
		frame.setHeaders(headers);
		inputstream = new ByteArrayInputStream(basicBody.getBytes());
		try {
			frame.parseBody(inputstream);

			assertTrue("test basic body with content-length", frame.getBody()
					.getBytes().length == (basicBody.length() - 2));
		} catch (IOException e) {
			fail("IOException");
		}

		/* string with 4089 character */
		basicBodyr\n";
		headers = new HashMap<String, String>();
		headers.put("content-length", String.valueOf(basicBody.length()-2));
		frame = new HttpFrame();
		frame.setHeaders(headers);
		inputstream = new ByteArrayInputStream(basicBody.getBytes());
		try {
			frame.parseBody(inputstream);
			assertTrue(
					"test basic body with content-length of 4089",
					frame.getBody().getBytes().length == (basicBody.length()-2));
		} catch (IOException e) {
			fail("IOException");
		}

		/* string more that 4089 character */
		basicBody = "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112222222\r\n";
		headers = new HashMap<String, String>();
		headers.put("content-length", String.valueOf(basicBody.length()-2));
		frame = new HttpFrame();
		frame.setHeaders(headers);
		inputstream = new ByteArrayInputStream(basicBody.getBytes());
		try {
			frame.parseBody(inputstream);
			assertTrue("test basic body with content-length > 4089", frame
					.getBody().getBytes().length == (basicBody.length()-2));
		} catch (IOException e) {
			fail("IOException");
		}
	}

	@Test
	public void parseHttpTest() {
		/* valid post request */
		String basicHttpHeader = "POST /rest/fake HTTP/1.1\r\nheaders1: value1\r\nheaders2: value2\r\ncontent-length: 4\r\n\r\nbody\r\n";
		InputStream inputstream = new ByteArrayInputStream(
				basicHttpHeader.getBytes());

		try {
			try {
				assertTrue(
						"test valid post request",
						new HttpFrame().parseHttp(inputstream) == HttpStates.HTTP_FRAME_OK);
			} catch (InterruptedException e) {
				fail("InterruptedException");
			}
		} catch (IOException e) {
			fail("IOException");
		}
		/* invalid request */
		basicHttpHeader = "POSTIT /rest/fake HTTP/1.1\r\nheaders1: value1\r\nheaders2: value2\r\ncontent-length: 4\r\n\r\nbody\r\n";
		inputstream = new ByteArrayInputStream(basicHttpHeader.getBytes());

		try {
			try {
				assertTrue(
						"test invalid request",
						new HttpFrame().parseHttp(inputstream) == HttpStates.MALFORMED_HTTP_FRAME);
			} catch (InterruptedException e) {
				fail("InterruptedException");
			}
		} catch (IOException e) {
			fail("IOException");
		}
		/* no content length */
		basicHttpHeader = "POSTIT /rest/fake HTTP/1.1\r\nheaders1: value1\r\nheaders2: value2\r\n\r\nbody\r\n";
		inputstream = new ByteArrayInputStream(basicHttpHeader.getBytes());

		try {
			try {
				assertTrue(
						"test invalid content length (not present)",
						new HttpFrame().parseHttp(inputstream) == HttpStates.MALFORMED_HTTP_FRAME);
			} catch (InterruptedException e) {
				fail("InterruptedException");
			}
		} catch (IOException e) {
			fail("IOException");
		}

		/* invalid content length */
		basicHttpHeader = "POSTIT /rest/fake HTTP/1.1\r\nheaders1: value1\r\ncontent-length: 3\r\nheaders2: value2\r\n\r\nbody\r\n";
		inputstream = new ByteArrayInputStream(basicHttpHeader.getBytes());

		try {
			try {
				assertTrue(
						"test invalid content length",
						new HttpFrame().parseHttp(inputstream) == HttpStates.MALFORMED_HTTP_FRAME);
			} catch (InterruptedException e) {
				fail("InterruptedException");
			}
		} catch (IOException e) {
			fail("IOException");
		}

		/* no body to be read */
		basicHttpHeader = "POSTIT /rest/fake HTTP/1.1\r\nheaders1: value1\r\ncontent-length: 3\r\nheaders2: value2\r\n\r\n";
		inputstream = new ByteArrayInputStream(basicHttpHeader.getBytes());

		try {
			try {
				assertTrue(
						"no body to be read",
						new HttpFrame().parseHttp(inputstream) == HttpStates.MALFORMED_HTTP_FRAME);
			} catch (InterruptedException e) {
				fail("InterruptedException");
			}
		} catch (IOException e) {
			fail("IOException");
		}
	}
}
